require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Bet. As you add validations to Bet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Fabio vai cair de uma escada", description: "Qual escada?", ownerId: 1, url_photo: "MyString",
    category: "Personalizado", room_status: 1, room_type: 1, stake: 1, final_date: "2016-10-25",
    final_answer: "Titanic 1", answer_type: "MyString"}
  }

  let(:invalid_attributes) {
    { name: "Fabio vai cair de uma escada", description: "Qual escada?", ownerId: nil, url_photo: "MyString",
    category: "Personalizado", room_status: "sdash", room_type: "asdsaih", stake: 1, final_date: "2016-10-25",
    final_answer: "Titanic 1", answer_type: "MyString"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BetsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all bets as @bets" do
      bet = Bet.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:bets)).to eq([bet])
    end
  end

  describe "GET #show" do
    it "assigns the requested bet as @bet" do
      bet = Bet.create! valid_attributes
      get :show, id: bet.to_param, session: valid_session
      expect(assigns(:bet)).to eq(bet)
    end
  end

  describe "GET #new" do
    it "assigns a new bet as @bet" do
      get :new, params: {}, session: valid_session
      expect(assigns(:bet)).to be_a_new(Bet)
    end
  end

  describe "GET #edit" do
    it "assigns the requested bet as @bet" do
      bet = Bet.create! valid_attributes
      get :edit, id: bet.to_param, session: valid_session
      expect(assigns(:bet)).to eq(bet)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Bet" do
        expect {
          post :create, bet: valid_attributes, session: valid_session
        }.to change(Bet, :count).by(1)
      end

      it "assigns a newly created bet as @bet" do
        post :create, bet: valid_attributes, session: valid_session
        expect(assigns(:bet)).to be_a(Bet)
        expect(assigns(:bet)).to be_persisted
      end

      it "redirects to the created bet" do
        post :create, bet: valid_attributes, session: valid_session
        expect(response).to redirect_to(Bet.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved bet as @bet" do
        post :create, bet: invalid_attributes, session: valid_session
        expect(assigns(:bet)).to be_a_new(Bet)
      end

      it "re-renders the 'new' template" do
        post :create, bet: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: 'Marcus vai cair' }
      }

      it "updates the requested bet" do
        bet = Bet.create! valid_attributes
        put :update, id: bet.to_param, bet: new_attributes, session: valid_session
        bet.reload
        expect(bet.attributes).to include( { "name" => "Marcus vai cair"} )
      end


      it "assigns the requested bet as @bet" do
        bet = Bet.create! valid_attributes
        put :update, id: bet.to_param, bet: valid_attributes, session: valid_session
        expect(assigns(:bet)).to eq(bet)
      end

      it "redirects to the bet" do
        bet = Bet.create! valid_attributes
        put :update, id: bet.to_param, bet: valid_attributes, session: valid_session
        expect(response).to redirect_to(bet)
      end
    end

    context "with invalid params" do
      it "assigns the bet as @bet" do
        bet = Bet.create! valid_attributes
        put :update, id: bet.to_param, bet: invalid_attributes, session: valid_session
        expect(assigns(:bet)).to eq(bet)
      end

      it "re-renders the 'edit' template" do
        bet = Bet.create! valid_attributes
        put :update, id: bet.to_param, bet: invalid_attributes, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested bet" do
      bet = Bet.create! valid_attributes
      expect {
        delete :destroy, id: bet.to_param, session: valid_session
      }.to change(Bet, :count).by(-1)
    end

    it "redirects to the bets list" do
      bet = Bet.create! valid_attributes
      delete :destroy, id: bet.to_param, session: valid_session
      expect(response).to redirect_to(bets_url)
    end
  end

end
